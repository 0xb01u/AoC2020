# --- Advent of code 2020: Day 14 ---

# (File automatically generated by aocTool, developed by B0lu, 2020.)

init = open("input.txt").readlines()
mem = {}
maskOR = 0

for ins in init:
	#print(ins)
	op, val = ins[:-1].split(" = ")
	if "mem" in op:
		#print(bin(maskOR), bin(maskAND))
		combinations = maskF.count(1)
		positions = [e for e, _ in enumerate(maskF[::-1]) if _ == 1]
		base = int(op.split("[")[1].split("]")[0]) | maskOR
		#print(maskF, positions)
		for p in positions:
			base &= ~(1 << p)

		addresses = []
		for e in range(2**combinations):
			edited = base
			for i, p in enumerate(positions):
				edited |= (e & (1 << i)) >> i << p
			addresses.append(edited)
		#print(addresses)

		for address in addresses:
			mem[address] = int(val)		
	else:
		maskOR = 0
		OR = [int(e == "1") for e in val]
		for bit in OR:
			maskOR = maskOR << 1 | bit
		maskF = [int(e == "X") for e in val]

print(f"Sum of all values: {sum(mem.values())}")
assert sum(mem.values()) == 3161838538691
