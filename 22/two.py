# --- Advent of code 2020: Day 22 ---

# (File automatically generated by aocTool, developed by B0lu, 2020.)

from functools import reduce

deck1, deck2 = open("input.txt").read().split("\n\n")
deck1 = list(map(int, deck1.splitlines()[1:]))
deck2 = list(map(int, deck2.splitlines()[1:]))

#print(deck1, deck2)

def recursive_combat(deck1, deck2):
	games = set()
	while len(deck1) > 0 and len(deck2) > 0:
		if (tuple(deck1), tuple(deck2)) in games:
			deck2 = []
			break

		games.add((tuple(deck1), tuple(deck2)))

		p1 = deck1.pop(0)
		p2 = deck2.pop(0)

		if len(deck1) >= p1 and len(deck2) >= p2:
			winner = recursive_combat(deck1[:p1], deck2[:p2])
			#print(len(games))
			if winner[0] == 1:
				deck1.append(p1)
				deck1.append(p2)
			else:
				deck2.append(p2)
				deck2.append(p1)


		else:
			if p1 > p2:
				deck1.append(p1)
				deck1.append(p2)
			else:
				deck2.append(p2)
				deck2.append(p1)

	winner = (1, deck1) if len(deck1) > 0 else (2, deck2)
	return winner

winner = recursive_combat(deck1, deck2)[1]
#print(winner)
print(f"Winner's points: {reduce(lambda x, y: x + y[0]*y[1], zip(winner[::-1], range(1, len(winner) + 1)), 0)}")
assert reduce(lambda x, y: x + y[0]*y[1], zip(winner[::-1], range(1, len(winner) + 1)), 0) == 34173
