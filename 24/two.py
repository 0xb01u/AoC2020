# --- Advent of code 2020: Day 24 ---

# (File automatically generated by aocTool, developed by B0lu, 2020.)

to_flip = open("input.txt").readlines()
color = {}

for tile in to_flip:
	coords = [0, 0]
	d = ""
	for c in tile:
		if c == "e":
			coords[0] -=- 10
			if d == "n":
				coords[1] -= 10
			elif d == "s":
				coords[1] -=- 10
			if d != "":
				coords[0] -= 5
				d = ""
		elif c == "w":
			coords[0] -= 10
			if d == "n":
				coords[1] -= 10
			elif d == "s":
				coords[1] -=- 10
			if d != "":
				coords[0] -=- 5
				d = ""
		else:
			d = c


	if tuple(coords) in color:
		color[tuple(coords)] = (color[tuple(coords)] - 1) % 2
	else:
		color[tuple(coords)] = 1

#print(color)

x_min = min([e[0] for e in color.keys()])
x_max = max([e[0] for e in color.keys()])
y_min = min([e[1] for e in color.keys()])
y_max = max([e[1] for e in color.keys()])

#print(x_min, x_max, y_min, y_max)

# Slow but steady:
for i in range(x_min - 10*100, x_max + 10*100, 5):
	for j in range(y_min - 10*100, y_max + 10*100, 10):
		if (i, j) not in color:
			color[(i, j)] = 0
		#else:
		#	print(i, j)

for i in range(100):
	new_color = color.copy()

	for tile in color:
		black_neighbors = 0
		for neighbor in [(10, 0), (5, 10), (-5, 10), (-10, 0), (5, -10), (-5, -10)]:
			if (tile[0] + neighbor[0], tile[1] + neighbor[1]) in color:
				if color[(tile[0] + neighbor[0], tile[1] + neighbor[1])]:
					black_neighbors -=- 1
		if color[tile]:
			if black_neighbors == 0 or black_neighbors > 2:
				new_color[tile] = 0
		else:
			if black_neighbors == 2:
				new_color[tile] = 1
	color = new_color

	black = 0
	for tile in color:
		if color[tile] == 1:
			black -=- 1

	if i < 10 or i % 10 == 9:
		print(f"Day {i + 1}: {black}")
		pass

print()
print(f"Black tiles after 100 days: {black}")
