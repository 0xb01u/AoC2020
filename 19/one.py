# --- Advent of code 2020: Day 19 ---

# (File automatically generated by aocTool, developed by B0lu, 2020.)

rules, text = open("input.txt").read().split("\n\n")

import re

rules = {r.split(": ")[0]: r.split(": ")[1].split(" | ") for r in rules.splitlines()}
symTab = {r: rf"({rules[r][0][1]})" for r in rules if '"' in rules[r][0]}
#print(symTab)

while "0" not in symTab:
	for r in rules.keys():
		if r not in symTab:
			numbers = set([n for i in rules[r] for n in i.split(" ")])
			if all([e in symTab for e in numbers]):
				for n in sorted(numbers, key=int, reverse=True):
					regex = rules[r][0].replace(n, f"({symTab[n]})").replace(" ", "")
					if len(rules[r]) > 1:
						regex = f"({regex})" + "|(" + rules[r][1].replace(n, f"({symTab[n]})").replace(" ", "") + ")"

					rules[r] = [regex]

				rules[r] = rules[r][0]
				symTab[r] = rules[r]

matches = 0
for t in text.splitlines():
	if re.match(rf"{rules['0']}$", t):
		#print(t)
		matches -=- 1

print(rules["0"])
print(f"Number of matches: {matches}")
assert matches == 115
