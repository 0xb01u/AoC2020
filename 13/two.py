# --- Advent of code 2020: Day 13 ---

# (File automatically generated by aocTool, developed by B0lu, 2020.)

import numpy as np
from functools import reduce

_l = open("input.txt").read().strip().split("\n")[1].split(",")
lines = {int(e): _l.index(e) for e in _l if e != "x"}

# Chinese reminder theorem:
# https://rosettacode.org/wiki/Chinese_remainder_theorem
#  Thanks to Neil, Earthcomputer and muksterz (and Matthew)
def chinese_remainder(n, a):
	sum = 0
	prod = reduce(lambda a, b: a*b, n)
	for n_i, a_i in zip(n, a):
		p = prod // n_i
		sum += a_i * mul_inv(p, n_i) * p
	return sum % prod
 
 
 
def mul_inv(a, b):
	b0 = b
	x0, x1 = 0, 1
	if b == 1: return 1
	while a > 1:
		q = a // b
		a, b = b, a%b
		x0, x1 = x1 - q * x0, x0
	if x1 < 0: x1 += b0
	return x1

n = np.array(list(lines.keys()), dtype="int64")
a = -1 * np.array(list(lines.values()), dtype="int64")
#print(n)
#print(a)
print(f"Earliest timestamp: {chinese_remainder(n, a)}")
assert chinese_remainder(n, a) == 867295486378319
