# --- Advent of code 2020: Day 16 ---

# (File automatically generated by aocTool, developed by B0lu, 2020.)

desc, mine, tickets = open("input.txt").read().split("\n\n")
d = {e.split(": ")[0]: list(map(lambda x: [int(x.split("-")[0]), int(x.split("-")[1])], e.split(": ")[1].split(" or "))) for e in desc.split("\n")}
m = list(map(int, mine.split("\n")[1].split(",")))
t = [list(map(int, e.split(","))) for e in tickets.strip().split("\n")[1:]]

valid = set()
for _, v in d.items():
	for r in v:
		for n in range(r[0], r[1] + 1):
			valid.add(n)

error = 0
vt = []
for ct in t:
	is_valid = True
	for field in ct:
		if field not in valid:
			is_valid = False
			break
	if is_valid:
		vt.append(True)
	else:
		vt.append(False)

v = [t[i] for i in range(len(t)) if vt[i]]
pi = {k: [n for i in range(len(d[k])) for n in range(d[k][i][0], d[k][i][1] + 1)] for k in d}
pf = [list(pi.keys())[:] for _ in m]

for ct in v:
	for field in pi:
		for i in range(len(ct)):
			if ct[i] not in pi[field] and field in pf[i]:
				pf[i].remove(field)
				#print(i, ct[i], field, pf[i])
				#if i == len(ct) - 1:
				#	print()

while sum(map(len, pf)) > len(pf):
	for f in pf:
		if len(f) == 1:
			for _f in pf:
				if f != _f and f[0] in _f:
					_f.remove(f[0])

#print(pf)
dp = 1
for k in pf:
	if "departure" in k[0]:
		#print(k)
		dp *= m[pf.index(k)]

print(f"Product of departures: {dp}")
assert dp == 603409823791
